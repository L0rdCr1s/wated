# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-07-11 18:25
from __future__ import unicode_literals

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('comments', models.PositiveIntegerField(default=0)),
                ('reports', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('upvotes', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.IntegerField(choices=[(0, 'downvote'), (1, 'upvote')], db_index=True)),
                ('voted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('voted_answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('bookmark_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('bookmarked_answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='CommentToAnAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reports', models.PositiveIntegerField(default=0)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Answer')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FollowedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(default='None', max_length=255)),
                ('quest_content', models.CharField(help_text='you are limited to255characters', max_length=255)),
                ('description', models.CharField(help_text='you are limited to300characters', max_length=300)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('following', models.PositiveIntegerField(default=0)),
                ('answers', models.PositiveIntegerField(default=0)),
                ('reports', models.PositiveIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReportedAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.IntegerField(choices=[(0, 'Offensive'), (1, 'Repeated'), (2, 'Out of topic'), (3, 'Not helpful')])),
                ('report_reason', models.CharField(help_text='you are limited to100characters', max_length=100)),
                ('reported_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='ReportedAnswerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.IntegerField(choices=[(0, 'Offensive'), (1, 'Repeated'), (2, 'Out of topic'), (3, 'Not helpful')])),
                ('report_reason', models.CharField(help_text='you are limited to100characters', max_length=100)),
                ('reported_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.CommentToAnAnswer')),
            ],
        ),
        migrations.CreateModel(
            name='ReportedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.IntegerField(choices=[(0, 'Offensive'), (1, 'Repeated'), (2, 'Out of topic'), (3, 'Not helpful')])),
                ('report_reason', models.CharField(help_text='you are limited to100characters', max_length=100)),
                ('reported_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Question')),
            ],
        ),
        migrations.AddField(
            model_name='followedquestion',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='answered_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uliza.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='reportedquestion',
            index=models.Index(fields=['question'], name='uliza_repor_questio_ca5943_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedquestion',
            index=models.Index(fields=['report'], name='uliza_repor_report_112daf_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedquestion',
            index=models.Index(fields=['reported_at'], name='uliza_repor_reporte_896840_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedanswercomment',
            index=models.Index(fields=['comment'], name='uliza_repor_comment_5cce24_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedanswercomment',
            index=models.Index(fields=['report'], name='uliza_repor_report_5ffd5c_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedanswercomment',
            index=models.Index(fields=['reported_at'], name='uliza_repor_reporte_ecf5ab_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedanswer',
            index=models.Index(fields=['answer'], name='uliza_repor_answer__d12a8b_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedanswer',
            index=models.Index(fields=['report'], name='uliza_repor_report_801f2d_idx'),
        ),
        migrations.AddIndex(
            model_name='reportedanswer',
            index=models.Index(fields=['reported_at'], name='uliza_repor_reporte_d4cacd_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['author'], name='uliza_quest_author__945282_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['quest_content'], name='uliza_quest_quest_c_12524b_idx'),
        ),
        migrations.AddIndex(
            model_name='followedquestion',
            index=models.Index(fields=['question'], name='uliza_follo_questio_854864_idx'),
        ),
        migrations.AddIndex(
            model_name='followedquestion',
            index=models.Index(fields=['following'], name='uliza_follo_followi_ee4b27_idx'),
        ),
        migrations.AddIndex(
            model_name='followedquestion',
            index=models.Index(fields=['followed_at'], name='uliza_follo_followe_53751b_idx'),
        ),
        migrations.AddIndex(
            model_name='bookmark',
            index=models.Index(fields=['bookmark_user'], name='uliza_bookm_bookmar_f183f3_idx'),
        ),
        migrations.AddIndex(
            model_name='answervote',
            index=models.Index(fields=['voted_answer'], name='uliza_answe_voted_a_4a37f9_idx'),
        ),
        migrations.AddIndex(
            model_name='answervote',
            index=models.Index(fields=['user'], name='uliza_answe_user_id_1eb12e_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['author'], name='uliza_answe_author__d160ac_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['answered_question'], name='uliza_answe_answere_2251ae_idx'),
        ),
    ]
